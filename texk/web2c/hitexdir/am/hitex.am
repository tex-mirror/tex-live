## $Id$
## texk/web2c/hitexdir/am/hitex.am: Makefile fragment for HiTeX
##
## Copyright 2021 Martin Ruckert <ruckert@cs.hm.edu>
## You may freely use, modify and/or distribute this file.

if HITEX
bin_PROGRAMS += hitex hishrink histretch
endif HITEX
EXTRA_PROGRAMS += hitex hishrink histretch

# convenience target to build all the programs here.
hiall: hitex hishrink histretch

# We want debugging for the parser, and we use features not in POSIX yacc.
# The result is that we assume bison? Not sure if that's ok.
AM_YFLAGS = -d -v -Wno-yacc

hitex_CPPFLAGS = $(AM_CPPFLAGS) $(ZLIB_INCLUDES)
hitex_LDADD = $(KPATHSEA_LIBS) $(ZLIB_LIBS)
#
histretch_CPPFLAGS = $(AM_CPPFLAGS) $(ZLIB_INCLUDES)
histretch_LDADD = $(ZLIB_LIBS)
#
# The -I$(srcdir)/hitexdir is so the compiler can find the *parser.h file.
hishrink_CPPFLAGS = $(AM_CPPFLAGS) $(ZLIB_INCLUDES) -I$(srcdir)/hitexdir
hishrink_LDADD = $(ZLIB_LIBS)

# HiTeX CWEB sources
hitex_web = hitexdir/format.w hitexdir/htex.w hitexdir/hitex.w

# Creating several files: need stamp file and two rules with identical recipes
hi_ctangle_sh = CWEBINPUTS=$(srcdir)/hitexdir AM_V_P=$(AM_V_P) $(SHELL) ./tangle-sh $@ $(CTANGLE)

# HiTeX C/yacc/lex sources generated using ctangle.
# For each cweb (.w) source file, list the files generated.
format_c_h_l_y = basetypes.h error.h hformat.h \
        mkhformat.c \
	hput.c hput.h \
	hget.c hget.h \
	shrink.l shrink.y \
	hishrink.c histretch.c
htex_c_h = htex.c htex.h
hitex_c_h = hitex.c hitex.h 

$(format_c_h_l_y): format-tangle
	$(hi_ctangle_sh) format
#
format-tangle: ctangle$(EXEEXT) hitexdir/format.w tangle-sh
	$(hi_ctangle_sh) format

$(hitex_c_h): hitex-tangle
	$(hi_ctangle_sh) hitex
#
hitex-tangle: ctangle$(EXEEXT) hitexdir/hitex.w tangle-sh
	$(hi_ctangle_sh) hitex

# htex.c needs hitex.h, so depend on the hitex tangle.
$(htex_c_h): htex-tangle hitex-tangle
	$(hi_ctangle_sh) htex
#
htex-tangle: ctangle$(EXEEXT) hitexdir/htex.w tangle-sh hitex-tangle
	$(hi_ctangle_sh) htex

# Generating hformat.c using mkhformat.
hformat.c: mkhformat
	./mkhformat >hformat.c || { rm -f hformat.c; exit 1; }

# hitex
nodist_hitex_SOURCES = hformat.c hput.c $(htex_c_h) $(hitex_c_h)

#histretch
nodist_histretch_SOURCES = hformat.c histretch.c

# The actual sources for the lexer and parser are in format.w.
# However, to simplify life with Automake (a little), we maintain them
# here as if they were real, direct source files. That is, we update
# them by hand when they change.
# 
# We want to do this partly because ultimately we want the generated
# .[ch] files to be saved in $(srcdir), as is done for the other .[ly]
# files, so that builders need not have yacc (bison in this case) and (f)lex. 
#
# The $(srcdir) is not necessary if everything is up to date,
# but can help with the remake if the [.ch] or [.ly] are not present.
hishrink_SOURCES = $(srcdir)/hitexdir/hishrink-lexer.l \
                   $(srcdir)/hitexdir/hishrink-parser.y
nodist_hishrink_SOURCES = hformat.c hishrink.c

# This is our attempt to ensure that bison is run before anything else.
#
$(hishrink_OBJECTS): $(srcdir)/hitexdir/hishrink-parser.h
#
# By the way, the $(BUILT_SOURCES) suggestion in the Automake manual for
# this does not work for us, because we want to be able to invoke
# specific targets (hiall, hitex, hishrink, ...), and $(BUILT_SOURCES)
# is only a dependency on general targets (all, install, ...).

EXTRA_DIST += hitexdir/ChangeLog $(hitex_web)

DISTCLEANFILES += $(nodist_hitex_SOURCES)
DISTCLEANFILES += $(nodist_hishrink_SOURCES) $(nodist_histretch_SOURCES)
DISTCLEANFILES += format-tangle htex-tangle hitex-tangle

## HiTeX tests
# still missing
